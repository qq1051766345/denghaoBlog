(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{427:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"gitlab-ci-cd学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci-cd学习"}},[t._v("#")]),t._v(" GitLab CI/CD学习")]),t._v(" "),a("h2",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D"}},[t._v("一.概念介绍")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#11gitlab-ci--%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7%E6%9C%BA%E5%88%B6-"}},[t._v("1.1gitlab-ci && 自动化部署工具机制 ")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#12%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%B5%A6%E6%88%91%E4%BB%AC%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%A5%BD%E5%A4%84"}},[t._v("1.2自动化部署給我们带来的好处")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E7%9F%A5%E8%AF%86%E9%A2%84%E5%A4%87"}},[t._v("二.知识预备")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#21-gitlab-ci%E6%B6%89%E5%8F%8A%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%A6%82%E5%BF%B5"}},[t._v("2.1 gitlab-ci涉及的抽象概念")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#23-gitlab-ciyml%E9%85%8D%E7%BD%AE%E7%9A%84%E7%89%B9%E5%AE%9A%E5%85%B3%E9%94%AE%E5%AD%97"}},[t._v("2.3 gitlab-ci.yml配置的特定关键字")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89gitlab-ci%E5%AE%9E%E6%88%98"}},[t._v("三.gitlab-ci实战")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#31-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAgitlab-ci%E7%9A%84hello-world"}},[t._v('3.1 编写一个gitlab-ci的"hello world"')])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9B-Gitlab-ci%E5%9D%91%E7%82%B9%E8%AF%A6%E8%A7%A3"}},[t._v("四. Gitlab-ci坑点详解")])])]),t._v(" "),a("h2",{attrs:{id:"一-概念介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-概念介绍"}},[t._v("#")]),t._v(" 一.概念介绍")]),t._v(" "),a("h3",{attrs:{id:"_1-1gitlab-ci-自动化部署工具机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1gitlab-ci-自动化部署工具机制"}},[t._v("#")]),t._v(" 1.1gitlab-ci && 自动化部署工具机制 ")]),t._v(" "),a("p",[t._v("以gitlab-ci为例：")]),t._v(" "),a("p",[t._v("(1) 通过在项目根目录下配置 "),a("strong",[t._v(".gitlab-ci.yml")]),t._v("文件，可以控制ci流程的不同阶段，例如install/检查/编译/部署服务器。gitlab平台会扫描.gitlab-ci.yml文件，并据此处理ci流程")]),t._v(" "),a("p",[t._v("(2) ci流程在每次团队成员"),a("strong",[t._v("push/merge")]),t._v("后之后触发。每当你push/merge一次，gitlab-ci都会检查项目下有没有.gitlab-ci.yml文件，如果有，它会执行你在里面编写的脚本，并完整地走一遍从"),a("strong",[t._v("intall =>")]),t._v(" "),a("strong",[t._v("eslint检查=>编译 =>部署服务器")]),t._v("的流程")]),t._v(" "),a("p",[t._v("(3)gitlab-ci提供了指定ci运行平台的机制，它提供了一个叫"),a("strong",[t._v("gitlab-runner")]),t._v("的软件，只要在对应的平台(机器或docker)上下载并运行这个命令行软件，并输入从gitlab交互界面获取的token,就可以把当前机器和对应的gitlab-ci流程绑定，也即：每次跑ci都在这个平台上进行。")]),t._v(" "),a("p",[t._v("(4)gitlab-ci的所有流程都是可视化的，每个流程节点的状态可以在gitlab的交互界面上看到，包括执行成功或失败。如下图所示,因为它的执行看上去就和多节管道一样，所以我们通常用“pipeLine”来称呼它")]),t._v(" "),a("p",[t._v("(5)不同push/merge所触发的CI流程不会互相影响，也就是说，你的一次push引发的CI流程并不会因为接下来另一位同事的push而阻断，它们是互不影响的。这一个特点方便让测试同学根据不同版本进行测试。")]),t._v(" "),a("p",[t._v("(6)pipeline不仅能被动触发，也是可以手动触发的。")]),t._v(" "),a("h3",{attrs:{id:"_1-2自动化部署給我们带来的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2自动化部署給我们带来的好处"}},[t._v("#")]),t._v(" 1.2自动化部署給我们带来的好处")]),t._v(" "),a("p",[t._v("自动化部署的好处体现在几个方面")]),t._v(" "),a("p",[a("strong",[t._v("1.提高前端的开发效率和开发测试之间的协调效率")])]),t._v(" "),a("p",[a("strong",[t._v("Before")])]),t._v(" "),a("p",[t._v("如果按照传统的流程，在项目上线前的测试阶段，前端同学修复bug之后，要手动把代码部署之后。才能通知测试同学在测试环境进行测试。")]),t._v(" "),a("p",[t._v("这会造成几个问题：本身手动部署服务的工作是比较繁琐的，占用了开发时间。同时开发-测试之间的环节的耦合问题，则会增加团队沟通成本。")]),t._v(" "),a("p",[a("strong",[t._v("After")])]),t._v(" "),a("p",[t._v("通过gitlab-ci，前端开发在提交代码之后就不用管了，ci流程会自动部署到测试或集成环境的服务器。很大程度上节约了开发的时间。")]),t._v(" "),a("p",[t._v("同时，因为开发和测试人员可以共用gitlab里的pipeline界面, 测试同学能够随时把握代码部署的情况，同时还可以通过交互界面手动启动pipeline，自己去部署测试，从而节约和开发之间的沟通时间。")]),t._v(" "),a("p",[a("strong",[t._v("2.从更细的粒度把握代码质量")])]),t._v(" "),a("p",[t._v("我们可以把eslint或其他的代码检查加到pipeline流程中，每当团队成员提交和合并一次，pipeline都会触发一次并对代码做一次全面检测，这样就从一个更细的粒度上控制代码质量了。")]),t._v(" "),a("h2",{attrs:{id:"二-知识预备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-知识预备"}},[t._v("#")]),t._v(" 二.知识预备")]),t._v(" "),a("p",[t._v("介绍完gitlab-ci的基本概念，接下来我将会介绍编写一个gitlab-ci用例所需要的知识。这是在实战之前的一点准备工作，主要包括三部分")]),t._v(" "),a("ul",[a("li",[t._v("gitlab-ci涉及的抽象概念")]),t._v(" "),a("li",[t._v("YML文件的基本语法规则")]),t._v(" "),a("li",[t._v(".gitlab-ci.yml配置的特定关键字")])]),t._v(" "),a("h2",{attrs:{id:"_2-1-gitlab-ci涉及的抽象概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-gitlab-ci涉及的抽象概念"}},[t._v("#")]),t._v(" 2.1 gitlab-ci涉及的抽象概念")]),t._v(" "),a("p",[t._v("首先要了解的是gitlab-ci中涉及的一些基本概念")]),t._v(" "),a("p",[a("strong",[t._v("1.Pipeline & Job")])]),t._v(" "),a("p",[t._v("Pipeline是Gitlab根据项目的.gitlab-ci.yml文件执行的流程，它由许多个任务节点组成, 而这些Pipeline上的每一个任务节点，都是一个独立的Job")]),t._v(" "),a("p",[t._v("Job在YML中的配置我们将会在下面介绍，现在需要知道的是："),a("strong",[t._v("每个Job都会配置一个stage属性，来表示这个Job所处的阶段。")])]),t._v(" "),a("p",[a("strong",[t._v("一个Pipleline有若干个stage,每个stage上有至少一个Job")]),t._v("，如下图所示：")]),t._v(" "),a("p",[a("strong",[t._v("2.Runner")])]),t._v(" "),a("p",[t._v("Runner可以理解为："),a("strong",[t._v("在特定机器上")]),t._v("根据项目的 **.gitlab-ci.yml"),a("strong",[t._v("文件，对项目执行pipeline的")]),t._v("程序 **。Runner可以分为两种： "),a("strong",[t._v("Specific Runner")]),t._v(" 和 "),a("strong",[t._v("Shared Runner")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Shared Runner")]),t._v("是Gitlab平台提供的免费使用的runner程序，它由Google云平台提供支持，每个开发团队有十几个。对于公共开源项目是免费使用的，如果是私人项目则有每月2000分钟的CI时间上限。")]),t._v(" "),a("li",[a("strong",[t._v("Specific Runner")]),t._v("是我们自定义的，在自己选择的机器上运行的runner程序，gitlab给我们提供了一个叫gitlab-runner的命令行软件，只要在对应机器上下载安装这个软件，并且运行gitlab-runner register命令，然后输入从gitlab-ci交互界面获取的token进行注册, 就可以在自己的机器上远程运行pipeline程序了。")])]),t._v(" "),a("p",[t._v("Gitlab-runner下载链接： "),a("a",{attrs:{href:"https://link.zhihu.com/?target=https://docs.gitlab.com/runner/install/",title:"https://docs.gitlab.com/runner/install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.gitlab.com/runner/install/"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("Shared Runner 和 Specific Runner的区别")])]),t._v(" "),a("ol",[a("li",[t._v("Shared Runner是所有项目都可以使用的，而Specific Runner只能针对特定项目运行")]),t._v(" "),a("li",[t._v("Shared Runner默认基于docker运行，没有提前装配的执行pipeline的环境，例如node等。而Specific Runner你可以自由选择平台，可以是各种类型的机器，如Linux/Windows等，并在上面装配必需的运行环境，当然也可以选择Docker/K8s等")]),t._v(" "),a("li",[t._v("私人项目使用Shared Runner受运行时间的限制，而Specific Runner的使用则是完全自由的。")])]),t._v(" "),a("p",[a("strong",[t._v("3.Executor")])]),t._v(" "),a("p",[t._v("什么是Executor？ 我们上面说过 Specific Runner是在我们自己选择的平台上执行的，这个平台就是我们现在说到的“Executor”，我们在特定机器上通过gitlab-runner这个命令行软件注册runner的时候，命令行就会提示我们输入相应的平台类型。可供选择的平台一共有如下几种，下面是一张它们各方面特点的比较表格")]),t._v(" "),a("p",[a("img",{attrs:{src:"image/image_6HkKjaH6sl.png",alt:""}})]),t._v(" "),a("p",[t._v("CI流程的运行控制，决定于项目根目录下编写的配置文件—— "),a("strong",[t._v(".gitlab-ci.yml")]),t._v("，正因如此，我们需要掌握YML的基本语法规则。")]),t._v(" "),a("p",[t._v("YML是一种编写配置文件的语言，比JSON更为简洁和方便，因此，我们首先要掌握的就是YML文件的编写语法。")]),t._v(" "),a("p",[t._v("一份简单的YML文件长下面这个样子：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("install-job")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注释")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" sss\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" install\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm install\n")])])]),a("p",[t._v("从这里我们就可以看出：")]),t._v(" "),a("ul",[a("li",[t._v("YML通过缩进组织层级")]),t._v(" "),a("li",[t._v("YML里允许通过#符号编写注释")])]),t._v(" "),a("p",[t._v("在基本结构上，YML和 JSON也类似")]),t._v(" "),a("ul",[a("li",[t._v("JSON是由对象，数组，以及对象和数组的嵌套结构组成的")]),t._v(" "),a("li",[t._v("YML也是由对象，数组，以及对象和数组的嵌套结构组成的。")])]),t._v(" "),a("p",[t._v("如下所示：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("colors\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" red\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" blue\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" yellow\n")])])]),a("h2",{attrs:{id:"_2-3-gitlab-ci-yml配置的特定关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-gitlab-ci-yml配置的特定关键字"}},[t._v("#")]),t._v(" 2.3 gitlab-ci.yml配置的特定关键字")]),t._v(" "),a("p",[t._v("在了解了YML文件的语法格式后，接下来需要了解的就是gitlab-ci独特的配置关键字，这些关键字将在.gitlab-ci.yml中使用，并用来控制一个pipeline具体的运作过程")]),t._v(" "),a("p",[t._v("gitlab提供了很多配置关键字，其中最基础和常用的有这么几个")]),t._v(" "),a("ul",[a("li",[t._v("stages")]),t._v(" "),a("li",[t._v("stage")]),t._v(" "),a("li",[t._v("script")]),t._v(" "),a("li",[t._v("tags")])]),t._v(" "),a("p",[a("strong",[t._v("stages & stage")])]),t._v(" "),a("p",[t._v("stages定义在YML文件的最外层，它的值是一个数组，用于定义一个pipeline不同的流程节点")]),t._v(" "),a("p",[t._v("例如我们定义如下:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stages")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 分段")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" install\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" eslint\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" deploy\n")])])]),a("p",[a("img",{attrs:{src:"image/image_K3IKfNQVBU.png",alt:""}})]),t._v(" "),a("p",[t._v("我们上面说过："),a("strong",[t._v("Job是pipeline的任务节点，它构成了pipeline的基本单元")])]),t._v(" "),a("p",[t._v("而stage/script/tags这三个关键字，都是作为Job的子属性来使用的,如下所示，install就是我们定义的一个Job")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("install")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" sss\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" install\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm install\n")])])]),a("p",[a("strong",[t._v("stage")])]),t._v(" "),a("p",[t._v("是一个字符串，且是stages数组的一个子项，表示的是当前的pipeline节点。")]),t._v(" "),a("p",[t._v("当前stage的执行情况能在交互面板上能看的清清楚楚：")]),t._v(" "),a("ul",[a("li",[t._v("正在执行是蓝色")]),t._v(" "),a("li",[t._v("尚未执行是灰色")]),t._v(" "),a("li",[t._v("执行成功是绿色")]),t._v(" "),a("li",[t._v("执行失败是红色")])]),t._v(" "),a("p",[a("img",{attrs:{src:"image/image_g9p6_qEJvk.png",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"image/image_OjsJfDYpyA.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("script")])]),t._v(" "),a("p",[t._v("它是当前pipeline节点运行的shell脚本（以项目根目录为上下文执行）。")]),t._v(" "),a("p",[t._v("这个script是我们控制CI流程的核心，我们所有的工作：从安装，编译到部署都是通过script中定义的shell脚本来完成的。")]),t._v(" "),a("p",[t._v("如果脚本执行成功，pipeline就会进入下一个Job节点，如果执行失败那么pipeline就会终止")]),t._v(" "),a("p",[a("strong",[t._v("tags")])]),t._v(" "),a("p",[t._v("tags是当前Job的标记，"),a("strong",[t._v("这个tags关键字是很重要，因为gitlab的runner会通过tags去判断能否执行当前这个Job")])]),t._v(" "),a("p",[t._v("例如我们在gitlab的面板中能看到当前激活的runner的信息")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("Gitlab项目首页="),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" setting ="),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" CI/CD ="),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" Runners\n")])])]),a("p",[a("img",{attrs:{src:"image/image_CBPsb2vtol.png",alt:""}})]),t._v(" "),a("p",[t._v("上面的这个sss就是当前Runner的tags，这意味着："),a("strong",[t._v("这个runner只会执行tag为sss的Job。")]),t._v(" 如果一个Job没有tag或者tag不是sss,那么即使这个Runner是激活且空闲的，也不会去执行！")]),t._v(" "),a("p",[t._v("基本的gitlab-ci关键字就介绍结束了，有了这些知识对于编写一个gitlab-ci的”hello world”已经足够了。对于更多的关键字的相关知识，将在文章最后再进行介绍")]),t._v(" "),a("h2",{attrs:{id:"三-gitlab-ci实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-gitlab-ci实战"}},[t._v("#")]),t._v(" 三.gitlab-ci实战")]),t._v(" "),a("h2",{attrs:{id:"_3-1-编写一个gitlab-ci的-hello-world"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-编写一个gitlab-ci的-hello-world"}},[t._v("#")]),t._v(" "),a("strong",[t._v('3.1 编写一个gitlab-ci的"hello world"')])]),t._v(" "),a("p",[t._v("好，说了这么多终于到了实践的部分了，请原谅前面的啰嗦，下面我将会展示一下如何从零开始实践一个gitlab-ci的Hello world:")]),t._v(" "),a("p",[a("strong",[t._v("1.在平台上下载并安装Gitlab-runner命令行")])]),t._v(" "),a("p",[t._v("我是在Mac上跑的ci，所以下面的适用于OSX系统（如果是其他平台，可自行参考以下官方链接中的相关资料）")]),t._v(" "),a("blockquote",[a("p",[t._v("参考资料：  "),a("a",{attrs:{href:"https://link.zhihu.com/?target=https://docs.gitlab.com/runner/install/",title:"https://docs.gitlab.com/runner/install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.gitlab.com/runner/install/"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("依次运行：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--output")]),t._v(" /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /usr/local/bin/gitlab-runner\n")])])]),a("p",[a("img",{attrs:{src:"image/image_E_XvhUJg8-.png",alt:""}})]),t._v(" "),a("p",[t._v("出现已安装表示安装成功")]),t._v(" "),a("p",[a("img",{attrs:{src:"image/image_myJeZi6U_e.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("2.初始化gitlab-runner")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~\ngitlab-runner "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\ngitlab-runner start\n")])])]),a("p",[t._v("最后输出如下，说明成功了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"image/image_bD3IqCQNHy.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("3.注册Runner")])]),t._v(" "),a("p",[t._v("运行完gitlab-runner start只是完成了初始化，接下来你还要通过注册才能运行runner")]),t._v(" "),a("p",[t._v("注册runner只需要一条运行命令：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-runner register\n")])])]),a("p",[a("img",{attrs:{src:"image/image_yAL7t2NK3K.png",alt:""}})]),t._v(" "),a("p",[t._v("上面要求输入的Runner绑定的token和url， 获取方式如下")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("Gitlab项目首页"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" setting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" CI/CD "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Runners\n")])])]),a("p",[t._v("出现如下表示成功")]),t._v(" "),a("p",[a("img",{attrs:{src:"image/image_N5h5F4sDNA.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("4.激活Runner")])]),t._v(" "),a("p",[t._v("注册完了可能还需要激活，这时我们可以看下面板，如果有个黑色的感叹号，这说明runner注册成功了，但是尚未激活（"),a("strong",[t._v("如果是绿色的说明已经激活，本步骤跳过")]),t._v("）")]),t._v(" "),a("p",[a("img",{attrs:{src:"image/image_8uyUtjl8oo.png",alt:""}})]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-runner verify\n")])])]),a("p",[a("strong",[t._v("5.梳理和规划Pipeline的不同阶段和过程")])]),t._v(" "),a("p",[t._v("在编写.gitlab-ci.yml前，首先需要考虑的是我们的pipeline分几个阶段处理。")]),t._v(" "),a("p",[t._v("从前端工程师的角度出发，一个前端项目的PipeLine处理包括以下阶段")]),t._v(" "),a("p",[a("strong",[t._v("<1> install阶段")])]),t._v(" "),a("p",[t._v("就是执行npm install命令,根据package.json安装node_modules依赖包")]),t._v(" "),a("p",[a("strong",[t._v("<2> eslint阶段")])]),t._v(" "),a("p",[t._v("执行eslint检查，判断代码格式是否符合规范，如果不符合则pipeline终止。")]),t._v(" "),a("p",[t._v("在这之前，我先通过npm install eslint安装了eslint检查工具，然后在项目根目录下配置了.eslintrc文件。这部分可自行参考相关资料，这里暂不多赘述。")]),t._v(" "),a("p",[a("strong",[t._v("<3>build阶段")])]),t._v(" "),a("p",[t._v("编译生成生产代码，可以通过webpack之类的打包工具执行编译。当然可以通过框架提供的编译命令进行编译，例如我这个示例项目是用 react-scripts脚手架搭建的，所以通过npx react-scripts build进行编译。")]),t._v(" "),a("p",[a("strong",[t._v("<4>deploy阶段")])]),t._v(" "),a("p",[t._v("deploy也就是部署阶段，也就是把刚才bulid阶段生成的生产代码，部署到生产访问的服务器上。这里又具体有以下两部分工作要做")]),t._v(" "),a("p",[a("strong",[t._v("A.申请服务器 & 安装web服务 (准备工作)")])]),t._v(" "),a("p",[t._v("（1）我本次使用的是百度云的"),a("strong",[t._v("云服务器")]),t._v("(每天9点的时候可以抢有一定免费使用期限的服务器)")]),t._v(" "),a("p",[t._v("（2）然后在本地终端通过ssh远程登陆服务器，并安装"),a("strong",[t._v("apache")]),t._v("以提供web服务")]),t._v(" "),a("p",[t._v("sudo apt-get install apache2")]),t._v(" "),a("p",[t._v("（3）然后，安装完后的apache会在服务器下新增 "),a("strong",[t._v("/var/www/html/")]),t._v(" 目录， 这个目录就是存放网站资源的位置。")]),t._v(" "),a("p",[t._v("（4）最后我们只需要在每次部署的时候把生产的单页面拷贝到这个页面下，就能在浏览器上通过对应的 "),a("strong",[t._v("IP+路径")]),t._v(" 来访问Web页面了。")]),t._v(" "),a("p",[a("strong",[t._v("B. 部署资源（每次pipeline都进行）")])]),t._v(" "),a("p",[t._v("我下面的示例中，是通过 "),a("strong",[t._v("scp")]),t._v(" 这一命令，将本地机器代码远程拷贝到云服务器上。")]),t._v(" "),a("p",[t._v("因为这一命令需要输入密码，所以通过 "),a("strong",[t._v("sshpass")]),t._v(" 命令携带密码再执行scp：")]),t._v(" "),a("p",[t._v("sshpass -p $PASSWORD scp -r ./build $CUSTOM_USERNAME@$CUSTOM_IP:/var/www/html")]),t._v(" "),a("p",[t._v("这里说明一下，"),a("strong",[t._v("Gitlab有自定义变量的功能")]),t._v("，例如我们觉得直接在YML中写入密码/账号等信息不太好，那么"),a("strong",[t._v("可以通过美元符号$写入一个预定义的变量，然后在Gitlab面板上输入它")])]),t._v(" "),a("p",[a("img",{attrs:{src:"image/image_0RHKnaUMkO.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("7.编写.gitlab-ci.yml配置文件")])]),t._v(" "),a("p",[t._v("回顾一下之前YML语法规则和gitlab-ci配置关键字的知识，就不难编写出以下YML文件")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("stages:\n  - "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n  - build\n  - deploy\n\n\njob1:\n  stage: "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n  script:\n    - "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n  only:\n    changes:\n      - package.json\n\n\njob2:\n  stage: build\n  script:\n    - "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run build\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将此阶段产物传递至下一阶段 ")]),t._v("\n  artifacts: \n    paths:\n      - dist/\njob3:\n  stage: deploy\n  script:\n    - "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-rf")]),t._v(" /denghao/shangPingHui/dist/*\n    - "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-rf")]),t._v(" ./dist/* /denghao/shangPingHui/dist/\n\ncache:\n  paths:\n    - node_modules\n\n\n")])])]),a("p",[a("strong",[t._v("8.提交项目代码")])]),t._v(" "),a("p",[t._v("OK！终于到最后一步了，commit然后push")]),t._v(" "),a("p",[t._v("可以看到运行如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"image/image_h19SOgLtnM.png",alt:""}})]),t._v(" "),a("p",[t._v("然后打开网址发现修改成功")]),t._v(" "),a("h2",{attrs:{id:"四-gitlab-ci坑点详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-gitlab-ci坑点详解"}},[t._v("#")]),t._v(" 四. Gitlab-ci坑点详解")]),t._v(" "),a("p",[t._v("说起来都是泪")]),t._v(" "),a("p",[a("strong",[t._v("1.起步报错")])]),t._v(" "),a("p",[t._v("git版本低导致第一步pull代码就运行错误")]),t._v(" "),a("p",[a("img",{attrs:{src:"image/image_nKrGk0mXyz.png",alt:""}})]),t._v(" "),a("p",[t._v("解决办法：更新git即可")]),t._v(" "),a("p",[t._v("2."),a("strong",[t._v("准备直接使用脚手架运行远程访问")])]),t._v(" "),a("p",[t._v("但是服务一旦启动job就直接停不下来，想通过下次提交的时候再执行关闭服务，但是上一个pipeline会阻塞住。这个方案失败,切换方案")]),t._v(" "),a("p",[a("strong",[t._v("3.打包完成以后dist替换不成功")])]),t._v(" "),a("p",[t._v("这个主要是linux命令不熟导致的")]),t._v(" "),a("p",[a("strong",[t._v("4.runner程序没有操作系统权限无法删除和复制")])]),t._v(" "),a("p",[t._v("在配置文件将runner权限更改，并且在shell脚本前加sudo")])])}),[],!1,null,null,null);a.default=e.exports}}]);